# Copyright (c) 2012 Lars Hupfeldt Nielsen, Hupfeldt IT
# All rights reserved. This work is under a BSD license, see LICENSE.TXT.

from __future__ import print_function

# pylint: disable=E0611
from pytest import raises, xfail

from .utils.utils import config_error, line_num, next_line_num, replace_user_file_line_msg, assert_lines_in, py3_local
from .utils.messages import already_printed_msg, exception_previous_object_expected_stderr
from .utils.messages import config_error_mc_required_current_env_expected, config_error_mc_required_other_env_expected
from .utils.messages import mc_required_current_env_expected, mc_required_other_env_expected
from .utils.messages import config_error_no_value_current_env_expected, config_error_no_value_other_env_expected
from .utils.messages import no_value_current_env_expected, no_value_other_env_expected
from .utils.tstclasses import RootWithAA, ItemWithAA, RepeatableItemWithAA, BuilderWithAA

from multiconf import ConfigItem, RepeatableConfigItem, ConfigBuilder, ConfigException, ConfigDefinitionException, MC_REQUIRED
from multiconf.decorators import nested_repeatables, required
from multiconf.envs import EnvFactory


# ef1
ef1_prod = EnvFactory()
prod1 = ef1_prod.Env('prod')

# ef2
ef2_pp_prod = EnvFactory()
pp2 = ef2_pp_prod.Env('pp')
prod2 = ef2_pp_prod.Env('prod')

# ef3
ef3_dev_prod = EnvFactory()

dev2ct3 = ef3_dev_prod.Env('dev2ct')
dev2st3 = ef3_dev_prod.Env('dev2st')
g_dev23 = ef3_dev_prod.EnvGroup('g_dev2', dev2ct3, dev2st3)

dev3ct3 = ef3_dev_prod.Env('dev3ct')
dev3st3 = ef3_dev_prod.Env('dev3st')
g_dev33 = ef3_dev_prod.EnvGroup('g_dev3', dev3ct3, dev3st3)

g_dev_overlap3 = ef3_dev_prod.EnvGroup('g_dev_overlap', dev2ct3)

g_all_dev3 = ef3_dev_prod.EnvGroup('g_dev', g_dev23, g_dev33)

pp3 = ef3_dev_prod.Env('pp')
prod3 = ef3_dev_prod.Env('prod')
g_prod3 = ef3_dev_prod.EnvGroup('g_prod', pp3, prod3)

g_all3 = ef3_dev_prod.EnvGroup('g_all', g_all_dev3, g_prod3)

# ef4
ef4_dev_prod = EnvFactory()

dev2ct4 = ef4_dev_prod.Env('dev2ct')
dev2st4 = ef4_dev_prod.Env('dev2st')
g_dev24 = ef4_dev_prod.EnvGroup('g_dev2', dev2ct4, dev2st4)

dev3ct4 = ef4_dev_prod.Env('dev3ct')
dev3st4 = ef4_dev_prod.Env('dev3st')
g_dev34 = ef4_dev_prod.EnvGroup('g_dev3', dev3ct4, dev3st4)

g_dev_overlap4 = ef4_dev_prod.EnvGroup('g_dev_overlap', dev2ct4, dev3ct4)

g_all_dev4 = ef4_dev_prod.EnvGroup('g_dev', g_dev24, g_dev34)

pp4 = ef4_dev_prod.Env('pp')
prod4 = ef4_dev_prod.Env('prod')
g_prod4 = ef4_dev_prod.EnvGroup('g_prod', pp4, prod4)

g_all4 = ef4_dev_prod.EnvGroup('g_all', g_all_dev4, g_prod4)

# ef5
ef5_dev_prod = EnvFactory()

dev2ct5 = ef5_dev_prod.Env('dev2ct')
dev2st5 = ef5_dev_prod.Env('dev2st')
g_dev25 = ef5_dev_prod.EnvGroup('g_dev2', dev2ct5, dev2st5)

dev3ct5 = ef5_dev_prod.Env('dev3ct')
dev3st5 = ef5_dev_prod.Env('dev3st')
g_dev35 = ef5_dev_prod.EnvGroup('g_dev3', dev3ct5, dev3st5)

g_dev_overlap15 = ef5_dev_prod.EnvGroup('g_dev_overlap1', dev2ct5)
g_dev_overlap25 = ef5_dev_prod.EnvGroup('g_dev_overlap2', dev2ct5)

g_all_dev5 = ef5_dev_prod.EnvGroup('g_dev', g_dev25, g_dev35)

pp5 = ef5_dev_prod.Env('pp')
prod5 = ef5_dev_prod.Env('prod')
g_prod5 = ef5_dev_prod.EnvGroup('g_prod', pp5, prod5)

g_all5 = ef5_dev_prod.EnvGroup('g_all', g_all_dev5, g_prod5)


def ce(line_num, *lines):
    return config_error(__file__, line_num, *lines)


_single_error_on_root_expected_ex = """There was 1 error when defining item: {
    "__class__": "RootWithAA #as: 'RootWithAA', id: 0000",
    "env": {
        "__class__": "Env",
        "name": "prod"
    },
    "aa": %s
}""" + already_printed_msg


_single_error_on_project_expected_ex = """There was 1 error when defining item: {
    "__class__": "project #as: 'project', id: 0000",
    "env": {
        "__class__": "Env",
        "name": "prod"
    },
    %s
}""" + already_printed_msg

_repeatable_item_json = """{
        "a": {
            "__class__": "RepeatableItem #as: 'RepeatableItems', id: 0000"
        }
    }
""".strip()


_i_expected_ex = """'ConfigItem' is defined both as simple value and a contained item: {
    "__class__": "ConfigItem #as: 'ConfigItem', id: 0000, not-frozen"
}"""


_j_expected = """'RepeatableItems': {
    "__class__": "RepeatableItem #as: 'RepeatableItems', id: 0000, not-frozen"
} is defined as repeatable, but this is not defined as a repeatable item in the containing class: 'ConfigRoot'"""


_k1_expected = """'RepeatableItems': {
    "__class__": "RepeatableItem #as: 'RepeatableItems', id: 0000, not-frozen"
} is defined as repeatable, but this is not defined as a repeatable item in the containing class: 'ConfigRoot'"""


_k4_expected = """'RepeatableItems': {
    "__class__": "RepeatableItems #as: 'RepeatableItems', id: 0000, not-frozen"
} is defined as non-repeatable, but the containing object has repeatable items with the same name: {
    "__class__": "project #as: 'project', id: 0000, not-frozen",
    "env": {
        "__class__": "Env",
        "name": "prod"
    },
    "RepeatableItems": {}
}"""


_p_expected = """File "fake_dir/multiconf_definition_errors_test.py", line %(line)s
ConfigError: Value for env 'dev2ct' is specified more than once, with no single most specific group or direct env:
value: 2, from: EnvGroup('g_dev2') {
     Env('dev2ct'),
     Env('dev2st')
}
value: 3, from: EnvGroup('g_dev_overlap') {
     Env('dev2ct'),
     Env('dev3ct')
}
File "fake_dir/multiconf_definition_errors_test.py", line %(line)s
ConfigError: Value for env 'dev3ct' is specified more than once, with no single most specific group or direct env:
value: 12, from: EnvGroup('g_dev3') {
     Env('dev3ct'),
     Env('dev3st')
}
value: 3, from: EnvGroup('g_dev_overlap') {
     Env('dev2ct'),
     Env('dev3ct')
}"""

_p_expected_ex = """There were 2 errors when defining item: {
    "__class__": "RootWithAA #as: 'RootWithAA', id: 0000",
    "env": {
        "__class__": "Env",
        "name": "prod"
    },
    "aa": 1
}""" + already_printed_msg


@nested_repeatables('RepeatableItems')
class project(ConfigRoot):
    pass


class RepeatableItem(RepeatableConfigItem):
    pass


def test_non_env_for_instantiatiation_env():
    xfail('OBSOLETE')
    with raises(ConfigException) as exinfo:
        project('Why?', ef1_prod)

    assert str(exinfo.value) == "project: env must be instance of 'Env'; found type 'str': 'Why?'"


def test_env_factory_is_not_an_env_factory():
    with raises(ConfigException) as exinfo:
        project(prod3, 1)

    assert str(exinfo.value) == "project: env_factory arg must be instance of 'EnvFactory'; found type 'int': 1"


_env_factory_arg_as_envgroup_exp = """ConfigRoot: env_factory arg must be instance of 'EnvFactory'; found type 'EnvGroup': EnvGroup('g_all') {
     EnvGroup('g_dev') {
       EnvGroup('g_dev2') {
         Env('dev2ct'),
         Env('dev2st')
    },
       EnvGroup('g_dev3') {
         Env('dev3ct'),
         Env('dev3st')
    }
  },
     EnvGroup('g_prod') {
       Env('pp'),
       Env('prod')
  }
}"""

def test_value_not_assigned_to_all_envs_in_builder(capsys):
    with raises(ConfigException) as exinfo:
        class B(ConfigBuilder):
            def build(self):
                pass

        with ConfigRoot(prod2, ef2_pp_prod) as cr:
            with B() as bb:
                errorline = next_line_num()
                bb.setattr('a', prod="hello")

    _sout, serr = capsys.readouterr()
    assert serr == ce(errorline, no_value_other_env_expected.format(attr='a', env=pp2))

    
def test_exception_in___exit___must_print_ex_info_and_raise_original_exception_if_any_pending_builder(capsys):
    with raises(Exception) as exinfo:
        class root(ConfigRoot):
            pass

        class inner(ConfigBuilder):
            def build(self):
                raise Exception("in build")

        with root(prod2, ef2_pp_prod):
            with inner():
                raise Exception("in with")

    _sout, serr = capsys.readouterr()
    assert serr == ""
    assert str(exinfo.value) == 'in with'


def test_error_freezing_previous_sibling__build(capsys):
    class inner(ConfigBuilder):
        def build(self):
            raise Exception("Error in build")

    with raises(Exception) as exinfo:
        with ConfigRoot(prod2, ef2_pp_prod) as cr:
            errorline = next_line_num()
            inner()
            inner()

    _sout, serr = capsys.readouterr()
    assert replace_user_file_line_msg(serr) == exception_previous_object_expected_stderr % dict(
        module='multiconf_definition_errors_test', py3_local=py3_local())
    assert str(exinfo.value) == "Error in build"


def test_builder_does_not_accept_nested_repeatables_decorator(capsys):
    with raises(ConfigDefinitionException) as exinfo:
        @nested_repeatables('a')
        class _inner(ConfigBuilder):
            def build(self):
                _a = 1

    _sout, serr = capsys.readouterr()
    err_msg = "File \"fake_dir/multiconf_definition_errors_test.py\", line 999\nConfigError: Decorator '@nested_repeatables' is not allowed on instance of ConfigBuilder.\n"
    assert replace_user_file_line_msg(serr) == err_msg
    assert str(exinfo.value) == "Decorator '@nested_repeatables' is not allowed on instance of ConfigBuilder."


def test_build_override_underscore_mc_error(capsys):
    errorline = line_num() + 3
    class B(ConfigBuilder):
        def build(self):
            self.override("_mca", "Hello")

    with raises(ConfigException) as exinfo:
        with ConfigRoot(prod2, ef2_pp_prod):
            B()

    _sout, serr = capsys.readouterr()
    msg = "Trying to set attribute '_mca' on a config item. Atributes starting with '_mc' are reserved for multiconf internal usage."
    assert serr == ce(errorline, msg)


def test_setattr_no_envs(capsys):
    def check(errorline):
        _sout, serr = capsys.readouterr()
        assert_lines_in(
            __file__, errorline, serr,
            start_file_line(__file__, errorline),
            "^ConfigError: No Env or EnvGroup names specified.",
            start_file_line(__file__, errorline),
            config_error_mc_required_other_env_expected.format(attr='aa', env=pp2),
            config_error_mc_required_current_env_expected.format(attr='aa', env=prod2),
        )

    # ConfigBuilder
    class B(BuilderWithAA):
        def build(self):
            pass

    with raises(ConfigException) as exinfo:
        with ConfigRoot(prod2, ef2_pp_prod):
            with B() as ci:
                errorline = next_line_num()
                ci.setattr('aa')

    check(errorline)

    with raises(ConfigException) as exinfo:
        with ConfigRoot(prod2, ef2_pp_prod):
            with B() as ci:
                errorline = next_line_num()
                ci.setattr('aa', 1)

    check(errorline)


def test_setattr_no_envs_set_unknown(capsys):
    def check(errorline):
        _sout, serr = capsys.readouterr()
        print("serr:", serr)
        assert_lines_in(
            __file__, errorline, serr,
            start_file_line(__file__, errorline),
            "^ConfigError: No Env or EnvGroup names specified.",
            start_file_line(__file__, errorline),
            config_error_no_value_other_env_expected.format(attr='aa', env=pp2),
            config_error_no_value_current_env_expected.format(attr='aa', env=prod2),
        )

    # ConfigBuilder
    class B(ConfigBuilder):
        def build(self):
            pass

    with raises(ConfigException) as exinfo:
        with ConfigRoot(prod2, ef2_pp_prod):
            with B() as ci:
                errorline = next_line_num()
                ci.setattr('aa?')

    check(errorline)

    with raises(ConfigException) as exinfo:
        with ConfigRoot(prod2, ef2_pp_prod):
            with B() as ci:
                errorline = next_line_num()
                ci.setattr('aa?', 1)

    check(errorline)
